# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2015-12-30 01:05
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('date_posted', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Comment')),
            ],
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='PantryItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, null=True)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('ingredient', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Ingredient')),
            ],
        ),
        migrations.CreateModel(
            name='PantryLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('is_public', models.BooleanField()),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, unique=True)),
                ('description', models.CharField(max_length=200)),
                ('image_url', models.CharField(max_length=200)),
                ('instructions', models.TextField()),
                ('poster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RecipeImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(height_field='height', upload_to='uploads/%Y/%m/%d/', width_field='width')),
                ('date_uploaded', models.DateTimeField(auto_now_add=True)),
                ('width', models.PositiveSmallIntegerField()),
                ('height', models.PositiveSmallIntegerField()),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Recipe')),
            ],
        ),
        migrations.CreateModel(
            name='RecipeIngredient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_plural', models.BooleanField(default=False)),
                ('quantity', models.PositiveSmallIntegerField(null=True)),
                ('unit', models.CharField(choices=[('volume', (('tsp', 'Teaspoon'), ('tbsp', 'Tablespoon'), ('fl oz', 'Fluid ounce'), ('c', 'Cup'), ('pt', 'Pint'), ('qt', 'Quart'), ('gal', 'Gallon'), ('ml', 'Milliliter'), ('l', 'Liter'), ('dl', 'Deciliter'))), ('mass', (('lb', 'Pound'), ('oz', 'Ounce'), ('mg', 'Milligram'), 'g', 'Gram', ('kg', 'Kilogram'))), ('length', (('mm', 'Millimeter'), ('cm', 'Centimeter'), ('m', 'Meter'), ('in', 'Inch'), ('yd', 'Yard'))), ('other', (('clove', 'Clove'), ('stalk', 'Stalk'), ('package', 'Package'), ('bag', 'Bag'), ('stick', 'Stick'), ('dash', 'Dash'), ('peck', 'Peck'), ('bushel', 'Bushel'), ('can', 'Can'), ('stone', 'Stone'), ('vine', 'Vine'), ('envelope', 'Envelope'), ('box', 'Box'), ('pinch', 'Pinch'), ('cube', 'Cube'), ('square', 'Square'), ('part', 'Part'), ('bunch', 'Bunch'), ('jar', 'Jar'), ('wedge', 'Wedge'), ('slice', 'Slice'), ('container', 'Container'), ('link', 'Link'), ('unit', 'Unit'), ('slice', 'Slice')))], max_length=200, null=True)),
                ('prep_note', models.CharField(max_length=200, null=True)),
                ('prep_action', models.CharField(max_length=200, null=True)),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Ingredient')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Recipe')),
            ],
        ),
        migrations.CreateModel(
            name='RecipeList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RecipeListMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('note', models.TextField()),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Recipe')),
                ('recipe_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.RecipeList')),
            ],
        ),
        migrations.CreateModel(
            name='RecipeSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField()),
            ],
        ),
        migrations.AddField(
            model_name='recipeingredient',
            name='recipe_section',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.RecipeSection'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='tags',
            field=models.ManyToManyField(to='api.Tag'),
        ),
        migrations.AddField(
            model_name='pantryitem',
            name='location',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.PantryLocation'),
        ),
        migrations.AddField(
            model_name='comment',
            name='recipe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Recipe'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
